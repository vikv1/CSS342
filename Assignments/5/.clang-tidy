
# # Configuration options for clang-tidyhead 
# # CSS Linux machines, Sep 2019: LLVM version 3.8.1
# #
# # usage: clang-tidy *.cpp -- -std=c++14
# #
# #
# ---
# # See https://clang.llvm.org/extra/clang-tidy/#using-clang-tidy for all possible checks
# Checks: 'readability-identifier-naming,-fuchsia-*,-cppcoreguidelines-pro-bounds-constant-array-index,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,-google-readability-braces-around-statements,-google-build-usi$'

# WarningsAsErrors: "*"
# # HeaderFilterRegex: '.*'

# # Based on LLVM style in https://llvm.org/docs/CodingStandards.html#the-low-level-issues
# CheckOptions:
#  - { key: readability-identifier-naming.ClassCase,           value: CamelCase  }
#  - { key: readability-identifier-naming.StructCase,          value: CamelCase  }
#  - { key: readability-identifier-naming.EnumCase,            value: CamelCase  }
#  - { key: readability-identifier-naming.VariableCase,        value: camelBack  }
#  - { key: readability-identifier-naming.GlobalConstantCase,  value: UPPER_CASE }
#  - { key: readability-identifier-naming.FunctionCase,        value: camelBack  }
#  - { key: readability-identifier-naming.PublicMethodCase,    value: camelBack  }
#  - { key: readability-identifier-naming.PrivateMethodCase,   value: camelBack  }
#  - { key: readability-identifier-naming.PublicMemberCase,    value: CamelCase  }


# Configuration options for clang-tidyhead 
# CSS Linux machines, Sep 2019: LLVM version 3.8.1
#
# usage: clang-tidy *.cpp -- -std=c++14
#
#
---
# See https://clang.llvm.org/extra/clang-tidy/#using-clang-tidy for all possible checks
Checks: '*,-fuchsia-*,-cppcoreguidelines-pro-bounds-constant-array-index,-cppcoreguidelines-pro-bounds-array-to-pointer-decay,-google-readability-braces-around-statements,-google-build-usi$, -llvmlibc-implementation-in-namespace, -llvmlibc-callee-namespace, -llvmlibc-restrict-system-libc-headers, -modernize-use-trailing-return-type, -google-build-using-namespace, -readability-identifier-length, -altera-unroll-loops, -bugprone-easily-swappable-parameters, -misc-no-recursion, -readability-convert-member-functions-to-static, -hicpp-braces-around-statements, -llvm-else-after-return, -llvmlibc-restrict-system-libc-headers, -concurrency-mt-unsafe, -cppcoreguidelines-pro-type-member-init, -hicpp-member-init, -performance-noexcept-move-constructor, -cppcoreguidelines-avoid-magic-numbers, -readability-magic-numbers, -readability-else-after-return, -readability-braces-around-statements, -altera-id-dependent-backward-branch, -hicpp-noexcept-move, -llvm-header-guard, -clang-diagnostic-error, -google-global-names-in-headers, -cppcoreguidelines-avoid-c-arrays, -hicpp-avoid-c-arrays, -modernize-avoid-c-arrays, -clang-diagnostic-error, -google-objc-function-naming, -hicpp-no-array-decay, -modernize-deprecated-headers, -bugprone-narrowing-conversions, -cppcoreguidelines-prefer-member-initializer, -cppcoreguidelines-owning-memory, -modernize-use-auto, -modernize-loop-convert, -bugprone-narrowing-conversions, -hicpp-deprecated-headers, -cppcoreguidelines-narrowing-conversions, -hicpp-use-auto, -cppcoreguidelines-avoid-non-const-global-variables, -cert-err58-cpp, -cppcoreguidelines-special-member-functions, -hicpp-special-member-functions, -hicpp-use-equals-delete, -modernize-use-equals-delete, -llvm-include-order, -readability-function-cognitive-complexity, -clang-analyzer-core.NullDereference, -modernize-use-default-member-init, -performance-unnecessary-copy-initialization'

WarningsAsErrors: "*"
HeaderFilterRegex: '.*'

# Based on LLVM style in https://llvm.org/docs/CodingStandards.html#the-low-level-issues
CheckOptions:
 - { key: readability-identifier-naming.ClassCase,           value: CamelCase  }
 - { key: readability-identifier-naming.StructCase,          value: CamelCase  }
 - { key: readability-identifier-naming.EnumCase,            value: CamelCase  }
 - { key: readability-identifier-naming.VariableCase,        value: camelBack  }
 - { key: readability-identifier-naming.GlobalConstantCase,  value: UPPER_CASE }
 - { key: readability-identifier-naming.FunctionCase,        value: camelBack  }
 - { key: readability-identifier-naming.PublicMethodCase,    value: camelBack  }
 - { key: readability-identifier-naming.PrivateMethodCase,   value: camelBack  }
 - { key: readability-identifier-naming.PublicMemberCase,    value: CamelCase  }





